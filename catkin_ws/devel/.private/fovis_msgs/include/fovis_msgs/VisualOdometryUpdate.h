// Generated by gencpp from file fovis_msgs/VisualOdometryUpdate.msg
// DO NOT EDIT!


#ifndef FOVIS_MSGS_MESSAGE_VISUALODOMETRYUPDATE_H
#define FOVIS_MSGS_MESSAGE_VISUALODOMETRYUPDATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Transform.h>

namespace fovis_msgs
{
template <class ContainerAllocator>
struct VisualOdometryUpdate_
{
  typedef VisualOdometryUpdate_<ContainerAllocator> Type;

  VisualOdometryUpdate_()
    : header()
    , curr_timestamp()
    , prev_timestamp()
    , relative_transform()
    , covariance()
    , estimate_status(0)  {
      covariance.assign(0.0);
  }
  VisualOdometryUpdate_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , curr_timestamp()
    , prev_timestamp()
    , relative_transform(_alloc)
    , covariance()
    , estimate_status(0)  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _curr_timestamp_type;
  _curr_timestamp_type curr_timestamp;

   typedef ros::Time _prev_timestamp_type;
  _prev_timestamp_type prev_timestamp;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _relative_transform_type;
  _relative_transform_type relative_transform;

   typedef boost::array<double, 36>  _covariance_type;
  _covariance_type covariance;

   typedef uint8_t _estimate_status_type;
  _estimate_status_type estimate_status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_DATA)
  #undef NO_DATA
#endif
#if defined(_WIN32) && defined(ESTIMATE_VALID)
  #undef ESTIMATE_VALID
#endif
#if defined(_WIN32) && defined(ESTIMATE_INSUFFICIENT_FEATURES)
  #undef ESTIMATE_INSUFFICIENT_FEATURES
#endif
#if defined(_WIN32) && defined(ESTIMATE_DEGENERATE)
  #undef ESTIMATE_DEGENERATE
#endif
#if defined(_WIN32) && defined(ESTIMATE_REPROJECTION_ERROR)
  #undef ESTIMATE_REPROJECTION_ERROR
#endif

  enum {
    NO_DATA = 0u,
    ESTIMATE_VALID = 1u,
    ESTIMATE_INSUFFICIENT_FEATURES = 2u,
    ESTIMATE_DEGENERATE = 3u,
    ESTIMATE_REPROJECTION_ERROR = 4u,
  };


  typedef boost::shared_ptr< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> const> ConstPtr;

}; // struct VisualOdometryUpdate_

typedef ::fovis_msgs::VisualOdometryUpdate_<std::allocator<void> > VisualOdometryUpdate;

typedef boost::shared_ptr< ::fovis_msgs::VisualOdometryUpdate > VisualOdometryUpdatePtr;
typedef boost::shared_ptr< ::fovis_msgs::VisualOdometryUpdate const> VisualOdometryUpdateConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator1> & lhs, const ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.curr_timestamp == rhs.curr_timestamp &&
    lhs.prev_timestamp == rhs.prev_timestamp &&
    lhs.relative_transform == rhs.relative_transform &&
    lhs.covariance == rhs.covariance &&
    lhs.estimate_status == rhs.estimate_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator1> & lhs, const ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fovis_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86e4e9402396b9789cfeaadd317551b4";
  }

  static const char* value(const ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86e4e9402396b978ULL;
  static const uint64_t static_value2 = 0x9cfeaadd317551b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fovis_msgs/VisualOdometryUpdate";
  }

  static const char* value(const ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"time curr_timestamp\n"
"time prev_timestamp\n"
"geometry_msgs/Transform relative_transform\n"
"float64[36] covariance\n"
"uint8 estimate_status\n"
"\n"
"uint8 NO_DATA = 0\n"
"uint8 ESTIMATE_VALID = 1\n"
"uint8 ESTIMATE_INSUFFICIENT_FEATURES = 2\n"
"uint8 ESTIMATE_DEGENERATE = 3\n"
"uint8 ESTIMATE_REPROJECTION_ERROR = 4\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.curr_timestamp);
      stream.next(m.prev_timestamp);
      stream.next(m.relative_transform);
      stream.next(m.covariance);
      stream.next(m.estimate_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VisualOdometryUpdate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fovis_msgs::VisualOdometryUpdate_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "curr_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.curr_timestamp);
    s << indent << "prev_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.prev_timestamp);
    s << indent << "relative_transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_transform);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "estimate_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.estimate_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOVIS_MSGS_MESSAGE_VISUALODOMETRYUPDATE_H
