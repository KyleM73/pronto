// Generated by gencpp from file pronto_msgs/IndexedMeasurement.msg
// DO NOT EDIT!


#ifndef PRONTO_MSGS_MESSAGE_INDEXEDMEASUREMENT_H
#define PRONTO_MSGS_MESSAGE_INDEXEDMEASUREMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pronto_msgs
{
template <class ContainerAllocator>
struct IndexedMeasurement_
{
  typedef IndexedMeasurement_<ContainerAllocator> Type;

  IndexedMeasurement_()
    : header()
    , utime(0)
    , state_utime(0)
    , z_effective()
    , z_indices()
    , R_effective()  {
    }
  IndexedMeasurement_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , utime(0)
    , state_utime(0)
    , z_effective(_alloc)
    , z_indices(_alloc)
    , R_effective(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _utime_type;
  _utime_type utime;

   typedef uint64_t _state_utime_type;
  _state_utime_type state_utime;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _z_effective_type;
  _z_effective_type z_effective;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _z_indices_type;
  _z_indices_type z_indices;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _R_effective_type;
  _R_effective_type R_effective;





  typedef boost::shared_ptr< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> const> ConstPtr;

}; // struct IndexedMeasurement_

typedef ::pronto_msgs::IndexedMeasurement_<std::allocator<void> > IndexedMeasurement;

typedef boost::shared_ptr< ::pronto_msgs::IndexedMeasurement > IndexedMeasurementPtr;
typedef boost::shared_ptr< ::pronto_msgs::IndexedMeasurement const> IndexedMeasurementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pronto_msgs::IndexedMeasurement_<ContainerAllocator1> & lhs, const ::pronto_msgs::IndexedMeasurement_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.utime == rhs.utime &&
    lhs.state_utime == rhs.state_utime &&
    lhs.z_effective == rhs.z_effective &&
    lhs.z_indices == rhs.z_indices &&
    lhs.R_effective == rhs.R_effective;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pronto_msgs::IndexedMeasurement_<ContainerAllocator1> & lhs, const ::pronto_msgs::IndexedMeasurement_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pronto_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a9a7b4bda2dae60a94faa7c688f6e20";
  }

  static const char* value(const ::pronto_msgs::IndexedMeasurement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a9a7b4bda2dae60ULL;
  static const uint64_t static_value2 = 0xa94faa7c688f6e20ULL;
};

template<class ContainerAllocator>
struct DataType< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pronto_msgs/IndexedMeasurement";
  }

  static const char* value(const ::pronto_msgs::IndexedMeasurement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint64 utime\n"
"uint64 state_utime\n"
"float64[] z_effective\n"
"int32[] z_indices\n"
"float64[] R_effective\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::pronto_msgs::IndexedMeasurement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.utime);
      stream.next(m.state_utime);
      stream.next(m.z_effective);
      stream.next(m.z_indices);
      stream.next(m.R_effective);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IndexedMeasurement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pronto_msgs::IndexedMeasurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pronto_msgs::IndexedMeasurement_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "utime: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.utime);
    s << indent << "state_utime: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.state_utime);
    s << indent << "z_effective[]" << std::endl;
    for (size_t i = 0; i < v.z_effective.size(); ++i)
    {
      s << indent << "  z_effective[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.z_effective[i]);
    }
    s << indent << "z_indices[]" << std::endl;
    for (size_t i = 0; i < v.z_indices.size(); ++i)
    {
      s << indent << "  z_indices[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.z_indices[i]);
    }
    s << indent << "R_effective[]" << std::endl;
    for (size_t i = 0; i < v.R_effective.size(); ++i)
    {
      s << indent << "  R_effective[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.R_effective[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRONTO_MSGS_MESSAGE_INDEXEDMEASUREMENT_H
