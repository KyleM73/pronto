// Generated by gencpp from file pronto_msgs/ControllerFootContact.msg
// DO NOT EDIT!


#ifndef PRONTO_MSGS_MESSAGE_CONTROLLERFOOTCONTACT_H
#define PRONTO_MSGS_MESSAGE_CONTROLLERFOOTCONTACT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pronto_msgs
{
template <class ContainerAllocator>
struct ControllerFootContact_
{
  typedef ControllerFootContact_<ContainerAllocator> Type;

  ControllerFootContact_()
    : header()
    , num_right_foot_contacts(0)
    , right_foot_contacts()
    , num_left_foot_contacts(0)
    , left_foot_contacts()  {
    }
  ControllerFootContact_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_right_foot_contacts(0)
    , right_foot_contacts(_alloc)
    , num_left_foot_contacts(0)
    , left_foot_contacts(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _num_right_foot_contacts_type;
  _num_right_foot_contacts_type num_right_foot_contacts;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _right_foot_contacts_type;
  _right_foot_contacts_type right_foot_contacts;

   typedef int32_t _num_left_foot_contacts_type;
  _num_left_foot_contacts_type num_left_foot_contacts;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _left_foot_contacts_type;
  _left_foot_contacts_type left_foot_contacts;





  typedef boost::shared_ptr< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerFootContact_

typedef ::pronto_msgs::ControllerFootContact_<std::allocator<void> > ControllerFootContact;

typedef boost::shared_ptr< ::pronto_msgs::ControllerFootContact > ControllerFootContactPtr;
typedef boost::shared_ptr< ::pronto_msgs::ControllerFootContact const> ControllerFootContactConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pronto_msgs::ControllerFootContact_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pronto_msgs::ControllerFootContact_<ContainerAllocator1> & lhs, const ::pronto_msgs::ControllerFootContact_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.num_right_foot_contacts == rhs.num_right_foot_contacts &&
    lhs.right_foot_contacts == rhs.right_foot_contacts &&
    lhs.num_left_foot_contacts == rhs.num_left_foot_contacts &&
    lhs.left_foot_contacts == rhs.left_foot_contacts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pronto_msgs::ControllerFootContact_<ContainerAllocator1> & lhs, const ::pronto_msgs::ControllerFootContact_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pronto_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac4086dd5e9ba23a62d9963e591cc896";
  }

  static const char* value(const ::pronto_msgs::ControllerFootContact_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac4086dd5e9ba23aULL;
  static const uint64_t static_value2 = 0x62d9963e591cc896ULL;
};

template<class ContainerAllocator>
struct DataType< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pronto_msgs/ControllerFootContact";
  }

  static const char* value(const ::pronto_msgs::ControllerFootContact_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32 num_right_foot_contacts\n"
"\n"
"# Porting from LCM definition:\n"
"# double right_foot_contacts[3][num_right_foot_contacts]\n"
"float64[] right_foot_contacts\n"
"\n"
"int32 num_left_foot_contacts\n"
"\n"
"# Porting from LCM definition:\n"
"# double left_foot_contacts[3][num_left_foot_contacts];\n"
"float64[] left_foot_contacts\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::pronto_msgs::ControllerFootContact_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_right_foot_contacts);
      stream.next(m.right_foot_contacts);
      stream.next(m.num_left_foot_contacts);
      stream.next(m.left_foot_contacts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerFootContact_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pronto_msgs::ControllerFootContact_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pronto_msgs::ControllerFootContact_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_right_foot_contacts: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_right_foot_contacts);
    s << indent << "right_foot_contacts[]" << std::endl;
    for (size_t i = 0; i < v.right_foot_contacts.size(); ++i)
    {
      s << indent << "  right_foot_contacts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.right_foot_contacts[i]);
    }
    s << indent << "num_left_foot_contacts: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_left_foot_contacts);
    s << indent << "left_foot_contacts[]" << std::endl;
    for (size_t i = 0; i < v.left_foot_contacts.size(); ++i)
    {
      s << indent << "  left_foot_contacts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.left_foot_contacts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRONTO_MSGS_MESSAGE_CONTROLLERFOOTCONTACT_H
